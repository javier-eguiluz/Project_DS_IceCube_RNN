import torch
import torch.nn as nn

class Model_RNN(nn.Module):
    
    def __init__(self, input_size, output_size, hidden_dim, n_layers, dropout, device):
        super(Model_RNN, self).__init__()

        self.device = device
        self.hidden_dim = hidden_dim
        self.n_layers = n_layers

        self.rnn = nn.RNN(input_size, hidden_dim, n_layers, batch_first=True, dropout=dropout).to(device)   
        self.fc = nn.Linear(hidden_dim, output_size).to(device)
    
    def forward(self, x):
        
        batch_size = x.size(0)

        # Initialize the hidden state
        hidden = self.init_hidden(batch_size)

        # Pass the input and hidden state into the model and obtain outputs
        out, hidden = self.rnn(x, hidden)
        
        # Prepare to feed the final output into the fully connected layer
        out = out[:, -1, :]
        
        # Process the patterns generated by the RNN part
        out = self.fc(out)
        
        return out
    
    def init_hidden(self, batch_size):
        # Generate the first hidden state (zero-vectors) for the forward pass
        hidden = torch.zeros(self.n_layers, batch_size, self.hidden_dim).to(self.device)
        return hidden
